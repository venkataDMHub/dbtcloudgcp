{{ config(materialized='ephemeral') }}

{% set accepted_transfer_types = (
        'AIRTIME_PURCHASES_COMPLETED',
        'BILL_PAYMENTS_COMPLETED',
        'CHECKOUTS_SETTLED',
        'CRYPTO_DEPOSITS_SETTLED',
        'CRYPTO_WITHDRAWALS_SETTLED',
        'DATA_PURCHASES_COMPLETED',
        'DEPOSITS_SETTLED',
        'ISSUED_CARD_TRANSACTIONS_FUNDING_COMPLETED',
        'ISSUED_CARD_TRANSACTIONS_WITHDRAWAL_COMPLETED',
        'PAYMENTS_P2P_SETTLED',
        'PAYMENT_INVITATIONS_SETTLED',
        'REQUESTS_SETTLED',
        'S2NC_SETTLED',
        'WITHDRAWALS_SETTLED'
    )
%}

select
    transfer_quotes.transfer_id,
    journal_id,
    fee_calculations.id as fee_calculation_id,
    fee_calculations.fee_config_id,
    null as forex_fee_calculation_id,
    transfer_quotes.id as transfer_quote_id,

    {# /* Null for now, but can be left-joined soon with the transaction_details transformation to populate provider info */ #}
    null as external_provider,
    null as external_provider_transaction_id,

    hlo_created_at as transaction_created_at,
    hlo_updated_at as transaction_updated_at,

    'NON_FOREX_FEES' as revenue_stream,
    fee_calculations.currency as revenue_currency,
    null as exchange_rate_fee_percentage_in_decimals,
    null as commission_revenue_rate_in_decimals,
    fee_calculations.debited_amount as gross_revenues,
    null as sales_discount_percentage_in_decimals,
    null as sales_discount,
    gross_revenues as net_revenues,

    iff(fee_calculations.currency = expanded_transfers.origin_currency, origin_rate, destination_rate) as rate_to_usd,
    gross_revenues * rate_to_usd as gross_revenues_in_usd,
    sales_discount * rate_to_usd as sales_discount_in_usd,
    net_revenues * rate_to_usd as net_revenues_in_usd,

    case 
        when fee_calculations.user_role = 'PAYER' 
        and transfer_quotes.sender_id not in ({{internal_users()}}) and expanded_transfers.outgoing_user_id is not null
        and transfer_quotes.recipient_id not in ({{internal_users()}}) and expanded_transfers.incoming_user_id is not null
            then transfer_quotes.sender_id

        when fee_calculations.user_role = 'RECIPIENT' 
        and transfer_quotes.sender_id not in ({{internal_users()}}) and expanded_transfers.outgoing_user_id is not null
        and transfer_quotes.recipient_id not in ({{internal_users()}}) and expanded_transfers.incoming_user_id is not null
            then transfer_quotes.recipient_id

        else coalesce(expanded_transfers.outgoing_user_id, expanded_transfers.incoming_user_id)
    end as monetized_user_id
from "CHIPPER".{{ var("core_public") }}."FEE_CALCULATIONS" as fee_calculations
inner join "CHIPPER".{{ var("core_public") }}."TRANSFER_QUOTES" as transfer_quotes
    on fee_calculations.transfer_quote_id = transfer_quotes.id
inner join "CHIPPER"."DBT_TRANSFORMATIONS"."EXPANDED_TRANSFERS" as expanded_transfers
    on transfer_quotes.transfer_id = expanded_transfers.transfer_id
where
    is_original_transfer_reversed = false
    and origin_amount_in_usd != destination_amount_in_usd
    and (
        (transfer_type in {{accepted_transfer_types}})

        {# /* Network API fees charged to consumers */ #}
        or (transfer_type = 'NETWORK_API_C2B_SETTLED' and user_role = 'PAYER')
        or (transfer_type = 'NETWORK_API_B2C_SETTLED' and user_role = 'RECIPIENT')

        {# /* Network API flat fees charged to merchants */ #}
            {# /* The Network API percentage fees model has been accounting for percentage fee amounts charged to merchants since the launch of the product */ #}
            {# /* Percentage fee amounts have been the ONLY revenues generated by the Network API product since its launch */ #}
            {# /* The transfer quotes system now allows flat fees to be charged to merchants too */ #}
        or (
            transfer_type = 'NETWORK_API_C2B_SETTLED'
            and user_role = 'RECIPIENT'
            and fee_calculations.flat_fee_amount = fee_calculations.debited_amount
            and fee_calculations.debited_amount != 0
        )
        or (
            transfer_type = 'NETWORK_API_B2C_SETTLED'
            and user_role = 'PAYER'
            and fee_calculations.flat_fee_amount = fee_calculations.debited_amount
            and fee_calculations.debited_amount != 0
        )
    )
